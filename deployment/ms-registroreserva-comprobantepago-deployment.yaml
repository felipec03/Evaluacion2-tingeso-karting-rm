apiVersion: apps/v1
kind: Deployment
metadata:
  name: ms-registroreserva-comprobantepago-deployment
  labels:
    app: ms-registroreserva-comprobantepago
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ms-registroreserva-comprobantepago
  template:
    metadata:
      labels:
        app: ms-registroreserva-comprobantepago
    spec:
      containers:
        - name: ms-registroreserva-comprobantepago
          image: felipec03/ms-registroreserva-comprobantepago:latest 
          ports:
            - containerPort: 8080 # Puerto interno que la app podría usar por defecto antes de que Eureka asigne uno dinámico.
                                  # El targetPort del Service debe coincidir.
          env:
            - name: SPRING_APPLICATION_NAME
              value: "ms-registroreserva-comprobantepago" # Coincide con el nombre en Eureka y Config Server
            - name: SPRING_CONFIG_IMPORT
              value: "configserver:http://config-server-service:8888" # URL del Config Server service
            - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              value: "http://eureka-server-service:8761/eureka/"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: SPRING_PROFILES_ACTIVE
              value: "kubernetes" # O "default" si no usas perfiles específicos en K8s
            # Variables para la base de datos, tomadas del ConfigMap
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: SPRING_DATASOURCE_URL_MS5 # La clave que definimos en app-configmap
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: app-configmap
                  key: SPRING_DATASOURCE_USERNAME # Clave compartida para el usuario
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom: # O usa value: "tu_password_aqui" si no está en ConfigMap y no quieres usar Secrets por ahora
                configMapKeyRef:
                  name: app-configmap
                  key: SPRING_DATASOURCE_PASSWORD
                  value: "postgres"
                                                  
---
apiVersion: v1
kind: Service
metadata:
  name: ms-registroreserva-comprobantepago-service
  labels:
    app: ms-registroreserva-comprobantepago
spec:
  selector:
    app: ms-registroreserva-comprobantepago
  ports:
    - protocol: TCP
      port: 8080      # Puerto que expone este Service internamente en el cluster
      targetPort: 8080 # Puerto en el que la aplicación dentro del Pod está escuchando (debe coincidir con containerPort o el puerto real de la app)
                      # Aunque server.port=0, Spring Boot suele arrancar en 8080 por defecto si no hay otra config.
                      # Eureka manejará el puerto dinámico para el registro, pero el Service necesita un targetPort fijo.
  type: ClusterIP     # Solo accesible dentro del cluster